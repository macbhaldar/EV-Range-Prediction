except:
st.warning('Generate a shopping cart to make recommendations')
else:
try:
st.write(shopping_cart.style.background_gradient(cmap=cm).set_precision(2))
except Exception:
pass
# Dataset search feature----------------------------------------------------------#
with st.expander("Search 'on-sale' data at " + str(location)):
search_input = st.text_input('Enter items as ("Pasta, Chocolate") format', key=2)
if search_input:
original_df = df.copy()
search_input.split(', ')
r = search_input.replace(', ','|')
st.write(original_df.loc[original_df['product'].str.contains(r,case=False)].style.background_gradient(cmap=cm).set_precision(2))
st.button('Search', key=3)
# Dataset download feature--------------------------------------------------------#
with st.expander("Download 'on-sale' data at " + str(location) + " as a CSV File/Excel Spreadsheet"):
#### Download Parsed Data Frame Button
if platform.system()=='Windows':
excel_download_string = str(pathlib.Path(queryselection)).replace('scraped products dump\location', '')
excel_download_string = excel_download_string
excel_download_string = excel_download_string.replace('.pkl', '') + '.csv'
else:
excel_download_string = str(pathlib.Path(queryselection)).replace('Deployment/scraped products dump/location', '')
excel_download_string = excel_download_string
excel_download_string = excel_download_string.replace('.pkl', '') + '.csv'
@st.cache
def convert_df(df):
return df.to_csv().encode('utf-8')
csv = convert_df(df)
st.download_button(
"Download as CSV",
csv,
excel_download_string,
"text/csv",
key='download-csv'
)
###################################################################################
View(handle)
View(templates)
templates
setwd("~/Python-Files/EV-range-prediction")
import pandas as pd
reticulate::repl_python()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.figure import Figure
data=pd.read_csv("data/ev-data.csv",encoding='ISO-8859-1')
View(data)
plt.figure(figsize=(20, 10))
plt.suptitle("Countplots")
plt.subplot(2, 3, 1)
plt.title("City counts")
sns.countplot(data['city'])
plt.subplot(2, 3, 2)
plt.title("Motor way counts")
sns.countplot(data['motor_way'])
plt.subplot(2, 3, 3)
plt.title("country_roads counts")
sns.countplot(data['country_roads'])
plt.subplot(2, 3, 4)
plt.title("driving_style counts")
sns.countplot(data['driving_style'])
plt.subplot(2, 3, 5)
plt.title("A/C counts")
sns.countplot(data['A/C'])
plt.subplot(2, 3, 6)
plt.title("park_heating counts")
sns.countplot(data['park_heating'])
plt.show()
plt.figure(figsize=(20, 10))
plt.suptitle("quantity(kWh)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['quantity(kWh)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['quantity(kWh)'])
plt.show()
plt.figure(figsize=(20, 10))
plt.suptitle("Distance(KM)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['trip_distance(km)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['trip_distance(km)'])
plt.show()
# Consumption(kWh/100km)
plt.figure(figsize=(20, 10))
plt.suptitle("consumption(kWh/100km)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['consumption(kWh/100km)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['consumption(kWh/100km)'])
plt.show()
# Average Speed (km/h)
plt.figure(figsize=(20, 10))
plt.suptitle("avg_speed(km/h)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['avg_speed(km/h)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['avg_speed(km/h)'])
plt.show()
plt.figure(figsize=(20, 10))
plt.subplot(2, 2, 1)
plt.title("Average speeds vs city")
sns.violinplot(x = 'city', y = 'avg_speed(km/h)', data = data)
plt.subplot(2, 2, 2)
plt.title("Average speeds vs motor_way")
sns.violinplot(x = 'motor_way', y = 'avg_speed(km/h)', data = data)
plt.subplot(2, 2, 3)
plt.title("Average speeds vs country_roads")
sns.violinplot(x = 'country_roads', y = 'avg_speed(km/h)', data = data)
plt.subplot(2, 2, 4)
plt.title("Average speeds vs driving_style")
sns.violinplot(x = 'driving_style', y = 'avg_speed(km/h)', data = data)
plt.show()
plt.figure(figsize=(12, 5))
plt.title("average spee vs driving range")
sns.regplot(x = 'avg_speed(km/h)', y = 'trip_distance(km)', data = data)
plt.show()
plt.figure(figsize=(20, 8))
plt.suptitle("car battery info. vs driving range")
plt.subplot(2, 2, 1)
plt.title("quantity(kWh) vs trip_distance(km)")
sns.scatterplot(x = 'quantity(kWh)', y = 'trip_distance(km)', data = data)
plt.subplot(2, 2, 2)
plt.title("consumption(kWh/100km) vs trip_distance(km)")
sns.scatterplot(x = 'consumption(kWh/100km)', y = 'trip_distance(km)', data = data)
plt.show()
# Consumption (kWh/100km) vs a/c and park heating
plt.figure(figsize=(20, 10))
plt.subplot(2, 2, 1)
plt.title("consumption(kWh/100km) vs a/c")
sns.boxplot(x = 'A/C', y = 'consumption(kWh/100km)', data = data)
plt.subplot(2, 2, 2)
plt.title("consumption(kWh/100km) vs park_heating")
sns.boxplot(x = 'park_heating', y = 'consumption(kWh/100km)', data = data)
# Correlition
data.corr()
sns.heatmap(data.corr())
plt.show()
data.corr()
sns.heatmap(data.corr())
plt.show()
data.corr()
sns.heatmap(data.corr())
plt.show()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.figure import Figure
data=pd.read_csv("data/ev-data.csv",encoding='ISO-8859-1')
# Countplots
plt.figure(figsize=(20, 10))
plt.suptitle("Countplots")
plt.subplot(2, 3, 1)
plt.title("City counts")
sns.countplot(data['city'])
plt.subplot(2, 3, 2)
plt.title("Motor way counts")
sns.countplot(data['motor_way'])
plt.subplot(2, 3, 3)
plt.title("country_roads counts")
sns.countplot(data['country_roads'])
plt.subplot(2, 3, 4)
plt.title("driving_style counts")
sns.countplot(data['driving_style'])
plt.subplot(2, 3, 5)
plt.title("A/C counts")
sns.countplot(data['A/C'])
plt.subplot(2, 3, 6)
plt.title("park_heating counts")
sns.countplot(data['park_heating'])
plt.show()
# Quantity(kWh)
plt.figure(figsize=(20, 10))
plt.suptitle("quantity(kWh)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['quantity(kWh)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['quantity(kWh)'])
plt.show()
# Distance(KM)
plt.figure(figsize=(20, 10))
plt.suptitle("Distance(KM)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['trip_distance(km)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['trip_distance(km)'])
plt.show()
# Consumption(kWh/100km)
plt.figure(figsize=(20, 10))
plt.suptitle("consumption(kWh/100km)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['consumption(kWh/100km)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['consumption(kWh/100km)'])
plt.show()
# Average Speed (km/h)
plt.figure(figsize=(20, 10))
plt.suptitle("avg_speed(km/h)")
plt.subplot(1, 2, 1)
plt.title("Distribution plot")
sns.distplot(data['avg_speed(km/h)'], kde = True)
plt.subplot(1, 2, 2)
plt.title("Box plot")
sns.boxplot(y=data['avg_speed(km/h)'])
plt.show()
# Average Speed
plt.figure(figsize=(20, 10))
plt.subplot(2, 2, 1)
plt.title("Average speeds vs city")
sns.violinplot(x = 'city', y = 'avg_speed(km/h)', data = data)
plt.subplot(2, 2, 2)
plt.title("Average speeds vs motor_way")
sns.violinplot(x = 'motor_way', y = 'avg_speed(km/h)', data = data)
plt.subplot(2, 2, 3)
plt.title("Average speeds vs country_roads")
sns.violinplot(x = 'country_roads', y = 'avg_speed(km/h)', data = data)
plt.subplot(2, 2, 4)
plt.title("Average speeds vs driving_style")
sns.violinplot(x = 'driving_style', y = 'avg_speed(km/h)', data = data)
plt.show()
# Average Speed vs Driving Range
plt.figure(figsize=(12, 5))
plt.title("average spee vs driving range")
sns.regplot(x = 'avg_speed(km/h)', y = 'trip_distance(km)', data = data)
plt.show()
# Car battery vs Driving Range
plt.figure(figsize=(20, 8))
plt.suptitle("car battery info. vs driving range")
plt.subplot(2, 2, 1)
plt.title("quantity(kWh) vs trip_distance(km)")
sns.scatterplot(x = 'quantity(kWh)', y = 'trip_distance(km)', data = data)
plt.subplot(2, 2, 2)
plt.title("consumption(kWh/100km) vs trip_distance(km)")
sns.scatterplot(x = 'consumption(kWh/100km)', y = 'trip_distance(km)', data = data)
plt.show()
# Consumption (kWh/100km) vs a/c and park heating
plt.figure(figsize=(20, 10))
plt.subplot(2, 2, 1)
plt.title("consumption(kWh/100km) vs a/c")
sns.boxplot(x = 'A/C', y = 'consumption(kWh/100km)', data = data)
plt.subplot(2, 2, 2)
plt.title("consumption(kWh/100km) vs park_heating")
sns.boxplot(x = 'park_heating', y = 'consumption(kWh/100km)', data = data)
# Correlition
data.corr()
sns.heatmap(data.corr())
plt.show()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
data=pd.read_csv("data/data_cleaned.csv")
data.head()
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
data=pd.read_csv("data/data_cleaned.csv")
data.head()
# Regression Tree
def tree_reg(data,columns_x,column_y):
global y_test_tr
global X_test_tr
reg=DecisionTreeRegressor(random_state=1)
X=data[columns_x]
Y=data[column_y]
X_train,X_test_tr,y_train,y_test_tr=train_test_split(X,Y,random_state=1)
reg.fit(X_train,y_train)
y_pred=reg.predict(X_test_tr)
mse=mean_squared_error(y_test_tr,y_pred)
return y_pred,mse
data.columns
columns_x=['quantity(kWh)' , 'city',
'motor_way', 'country_roads', 'consumption(kWh/100km)',
'A/C', 'park_heating', 'avg_speed(km/h)']
column_y='trip_distance(km)'
y_pred_tr,mse_tr=tree_reg(data,columns_x,column_y)
def plot_graph(y_pred):
sns.scatterplot(X_test_tr['quantity(kWh)'],y_test_tr)
sns.scatterplot(X_test_tr['quantity(kWh)'],y_pred)
plt.show()
def plot_difference(y_pred):
sns.scatterplot(X_test_tr['quantity(kWh)'],y_test_tr-y_pred)
plt.show()
plot_graph(y_pred_tr)
plot_difference(y_pred_tr)
data_l=pd.read_csv("data_enc_label.csv")
data_l.columns
columns_xl=['quantity(kWh)' , 'city',
'motor_way', 'country_roads', 'consumption(kWh/100km)',
'A/C', 'park_heating', 'avg_speed(km/h)','tire_type_enc', 'driving_style_enc']
column_yl='trip_distance(km)'
y_predl_tr,msel_tr=tree_reg(data_l,columns_xl,column_yl)
plot_graph(y_predl_tr)
plot_difference(y_predl_tr)
data_d=pd.read_csv("data_enc_dummies.csv")
data_d.columns
columns_xd=['quantity(kWh)' , 'city',
'motor_way', 'country_roads', 'consumption(kWh/100km)',
'A/C', 'park_heating', 'avg_speed(km/h)','tire_type_Summer tires', 'tire_type_Winter tires',
'driving_style_Moderate', 'driving_style_Normal']
column_yd='trip_distance(km)'
y_predd_tr,msed_tr=tree_reg(data_d,columns_xd,column_yd)
plot_graph(y_predd_tr)
plot_difference(y_predd_tr)
print("MSE for normal LR is {}".format(mse_tr))
print("MSE for label encoded LR is {}".format(msel_tr))
print("MSE for dummy encoded LR is {}".format(msed_tr))
# Random Forest Regressor
def rf_reg(data,columns_x,column_y):
global y_test_rf
global X_test_rf
reg=RandomForestRegressor(random_state=1)
X=data[columns_x]
Y=data[column_y]
X_train,X_test_rf,y_train,y_test_rf=train_test_split(X,Y,random_state=1)
reg.fit(X_train,y_train)
y_pred=reg.predict(X_test_rf)
mse=mean_squared_error(y_test_rf,y_pred)
return y_pred,mse
y_pred_rf,mse_rf=rf_reg(data,columns_x,column_y)
def plot_graph_rf(y_pred):
sns.scatterplot(X_test_rf['quantity(kWh)'],y_test_rf)
sns.scatterplot(X_test_rf['quantity(kWh)'],y_pred)
plt.show()
def plot_difference_rf(y_pred):
sns.scatterplot(X_test_rf['quantity(kWh)'],y_test_rf-y_pred)
plt.show()
plot_graph_rf(y_pred_rf)
plot_difference_rf(y_pred_rf)
y_predl_rf,msel_rf=rf_reg(data_l,columns_xl,column_yl)
msel_rf
plot_graph_rf(y_predl_rf)
plot_difference_rf(y_predl_rf)
y_predd_rf,msed_rf=rf_reg(data_d,columns_xd,column_yd)
msed_rf
plot_graph_rf(y_predd_rf)
plot_difference_rf(y_predd_rf)
print("MSE for normal LR is {} km".format(mse_rf))
print("MSE for label encoded LR is {} km".format(msel_rf))
print("MSE for dummy encoded LR is {} km".format(msed_rf))
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as mse
import matplotlib.pyplot as plt
import seaborn as sns
data=pd.read_csv("data/data_cleaned.csv")
data.columns
X=data.drop(['fuel_note','manufacturer', 'model', 'version', 'fuel_date', 'odometer',
'trip_distance(km)', 'fuel_type','tire_type', 'driving_style',],axis=1)
Y=data['trip_distance(km)']
X_train,X_test,y_train,y_test=train_test_split(X,Y,random_state=1)
lr=LinearRegression()
lr.fit(X_train,y_train)
y_pred=lr.predict(X_test)
sns.scatterplot(X_test['quantity(kWh)'],y_test)
sns.scatterplot(X_test['quantity(kWh)'],y_pred)
mse(y_test,y_pred)
lr.score(X_test,y_test)
data_enc_l=pd.read_csv("data_enc_label.csv")
data_enc_l.head()
X_enc_l=data_enc_l.drop(['fuel_note','manufacturer', 'model', 'version', 'fuel_date', 'odometer',
'trip_distance(km)', 'fuel_type','tire_type', 'driving_style',],axis=1)
Y_enc_l=data_enc_l['trip_distance(km)']
X_train_enc_l,X_test_enc_l,y_train_enc_l,y_test_enc_l=train_test_split(X_enc_l,Y_enc_l,random_state=1)
lr.fit(X_train_enc_l,y_train_enc_l)
y_pred_enc_l=lr.predict(X_test_enc_l)
y_pred_enc_l
sns.scatterplot(X_test_enc_l['quantity(kWh)'],y_test_enc_l)
sns.scatterplot(X_test_enc_l['quantity(kWh)'],y_pred_enc_l)
mse(y_test_enc_l,y_pred_enc_l)
lr.score(X_test_enc_l,y_test_enc_l)
data_enc_dum=pd.read_csv("data_enc_dummies.csv")
data_enc_dum.head()
X_enc_dum=data_enc_dum.drop(['fuel_note','manufacturer', 'model', 'version', 'fuel_date', 'odometer',
'trip_distance(km)', 'fuel_type'],axis=1)
Y_enc_dum=data_enc_dum['trip_distance(km)']
X_train_enc_dum,X_test_enc_dum,y_train_enc_dum,y_test_enc_dum=train_test_split(X_enc_dum,Y_enc_dum,random_state=1)
lr.fit(X_train_enc_dum,y_train_enc_dum)
y_pred_enc_dum=lr.predict(X_test_enc_dum)
y_pred_enc_dum
sns.scatterplot(X_test_enc_dum['quantity(kWh)'],y_test_enc_dum)
sns.scatterplot(X_test_enc_dum['quantity(kWh)'],y_pred_enc_dum)
plt.legend(["Predicted","Actual"])
mse(y_test_enc_dum,y_pred_enc_dum)
lr.score(X_test_enc_dum,y_test_enc_dum)
mse_n=mse(y_test,y_pred)
mse_enc_l=mse(y_test_enc_l,y_pred_enc_l)
mse_enc_dum=mse(y_test_enc_dum,y_pred_enc_dum)
plt.figure(figsize=(20, 10))
plt.suptitle("Lr model")
plt.subplot(1, 3, 1)
plt.title("Normal")
sns.scatterplot(X_test['quantity(kWh)'],y_test)
sns.scatterplot(X_test['quantity(kWh)'],y_pred)
plt.subplot(1, 3, 2)
plt.title("label encoded")
sns.scatterplot(X_test_enc_l['quantity(kWh)'],y_test_enc_l)
sns.scatterplot(X_test_enc_l['quantity(kWh)'],y_pred_enc_l)
plt.subplot(1, 3, 3)
plt.title("dummies encoded")
sns.scatterplot(X_test_enc_dum['quantity(kWh)'],y_test_enc_dum)
sns.scatterplot(X_test_enc_dum['quantity(kWh)'],y_pred_enc_dum)
plt.show()
plt.figure(figsize=(20, 10))
plt.suptitle("Lr model")
plt.subplot(1, 3, 1)
sns.scatterplot(X_test['quantity(kWh)'],y_test-y_pred)
plt.subplot(1, 3, 2)
sns.scatterplot(X_test_enc_l['quantity(kWh)'],y_test_enc_l-y_pred_enc_l)
plt.subplot(1, 3, 3)
sns.scatterplot(X_test_enc_dum['quantity(kWh)'],y_test_enc_dum-y_pred_enc_dum)
plt.show()
print("MSE for normal LR is {}".format(mse_n))
print("MSE for label encoded LR is {}".format(mse_enc_l))
print("MSE for dummy encoded LR is {}".format(mse_enc_dum))
sns.scatterplot(X_test['quantity(kWh)'],y_test)
sns.scatterplot(X_test['quantity(kWh)'],y_pred)
sns.scatterplot(X_test_enc_l['quantity(kWh)'],y_test_enc_l)
sns.scatterplot(X_test_enc_l['quantity(kWh)'],y_pred_enc_l)
sns.scatterplot(X_test_enc_dum['quantity(kWh)'],y_test_enc_dum)
sns.scatterplot(X_test_enc_dum['quantity(kWh)'],y_pred_enc_dum)
quit
from selenium import webdriver
reticulate::repl_python()
import pandas as pd
import numpy as np
data=pd.read_csv("data.csv",encoding='ISO-8859-1')
data.head()
data.isnull().sum()
data.shape
data.dropna(subset=['avg_speed(km/h)']).shape
data.dropna(subset=['avg_speed(km/h)'],inplace=True)
data.shape
data.columns
fixing outliers
data['avg_speed(km/h)'].describe()[6]
def count_outliers(data,column):
count=0
q1=data[column].describe()[4]
q3=data[column].describe()[6]
iqr=q3-q1
for i in data[column]:
if (i<q1-(1.5*iqr)) or (i>q3+(1.5*iqr)):
count+=1
return count
outlier_columns=[
'trip_distance(km)', 'quantity(kWh)',
'consumption(kWh/100km)',
'avg_speed(km/h)', 'ecr_deviation']
for column in outlier_columns:
print("No of outliers in {} are {}".format(column,count_outliers(data,column)))
def remove_outliers(data,column_list):
for column in column_list:
q1=data[column].describe()[4]
q3=data[column].describe()[6]
iqr=q3-q1
for i in data[column]:
if (i<q1-(1.5*iqr)) or (i>q3+(1.5*iqr)):
data = data.loc[data[column] != i]
return data
data.shape
data=remove_outliers(data,outlier_columns)
data.shape
for column in outlier_columns:
print("No of outliers in {} are {}".format(column,count_outliers(data,column)))
data.to_csv("data_cleaned.csv",index=False)
import pandas as pd
import numpy as np
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as mse
import matplotlib.pyplot as plt
import seaborn as sns
data=pd.read_csv("data_cleaned.csv")
X=data.drop(['fuel_note','manufacturer', 'model', 'version', 'fuel_date', 'odometer',
'trip_distance(km)', 'fuel_type','tire_type', 'driving_style',],axis=1)
Y=data['trip_distance(km)']
X_train,X_test,y_train,y_test=train_test_split(X,Y,random_state=1)
svr=SVR()
svr.fit(X_train,y_train)
y_pred=svr.predict(X_test)
y_pred-y_t
